#!/usr/bin/env bash

help() {
    echo -e "${YELLOW}shiba${NC} - the good boie rest api"
    echo -e "    ${GREEN}version ${SHIBA_VERSION}${NC}"

    echo -e "${BLUE}usage:${NC}"
    echo -e "    $0 [flags/options] [routes]"
    echo -e "${BLUE}flags:${NC}"
    echo -e "    ${GREEN}-h${NC}, ${GREEN}--help${NC}"
    echo -e "        print this help menu"
    echo -e "${BLUE}options:${NC}"
    echo -e "    ${GREEN}-b${NC}, ${GREEN}--bind <address>${NC}"
    echo -e "        specify bind address"
    echo -e "        ${MAGENTA}default${NC}: 0.0.0.0 (all interfaces)"
    echo -e "    ${GREEN}-p${NC}, ${GREEN}--port <port>${NC}"
    echo -e "        specify port"
    echo -e "        ${MAGENTA}default${NC}: 8000"
    # echo -e "    ${GREEN}-c${NC}, ${GREEN}--config <config-file>${NC}"
    # echo -e "        load settings and routes from configuration file"
    # echo -e "        ${MAGENTA}default${NC}: none"
    echo -e "${BLUE}routes:${NC}"
    # TODO: json/sql representation based on file extension
    echo -e "    ${CYAN}resource${NC} ${GREEN}<endpoint>${NC} ${GREEN}<file>${NC}"
    echo -e "        create a REST resource exposed at the given endpoint"
    echo -e "        storing the data in the provided file"
    echo -e "        ${YELLOW}example${NC}: ${CYAN}resource${NC} ${GREEN}/documents${NC} ${GREEN}documents.json${NC}"
    echo -e "            ${GREEN}GET${NC} ${BLUE}/documents${NC}: list all documents"
    echo -e "            ${GREEN}POST${NC} ${BLUE}/documents${NC}: create a new document and return it"
    echo -e "            ${GREEN}GET${NC} ${BLUE}/documents/<id>${NC}: retrieve the document with the given id"
    echo -e "            ${GREEN}PUT${NC} ${BLUE}/documents/<id>${NC}: update the document with the given id"
    echo -e "            ${GREEN}DELETE${NC} ${BLUE}/documents/<id>${NC}: delete document with the given id"
    echo -e "        ${MAGENTA}note${NC}: paths can include an optional trailing slash"
    # TODO: content type override
    echo -e "    ${CYAN}static${NC} ${GREEN}<endpoint>${NC} ${GREEN}<file|directory>${NC}"
    echo -e "        statically serve the given file or directory at the specified endpoint"
    echo -e "        ${YELLOW}example${NC}: ${CYAN}static${NC} ${GREEN}/${NC} ${GREEN}index.html${NC}"
    echo -e "            will statically serve the 'index.html' file on /"
    echo -e "        ${YELLOW}example${NC}: ${CYAN}static${NC} ${GREEN}/static/${NC} ${GREEN}./media${NC}"
    echo -e "            will statically serve all files from the 'media' directory on /static/"
    echo -e "            suppose the 'media' directory contained a file 'logo.png'"
    echo -e "            and a subdirectory 'profiles' containing a file named 'user.png'"
    echo -e "            'logo.png' can be accessed at /static/logo.png"
    echo -e "            'user.png' can be accessed at /static/profiles/user.png"
    echo -e "        ${MAGENTA}note${NC}: automatically sets Content-Type header based on file type"
    echo -e "    ${CYAN}command${NC} ${GREEN}<endpoint>${NC} ${GREEN}<file|command>${NC}"
    echo -e "        execute file or command and return the generated output"
    echo -e "        path variables are passed as arguments, http data is passed as input on stdin"
    echo -e "        ${YELLOW}example${NC}: ${CYAN}command${NC} ${GREEN}/hello/<name>${NC} ${GREEN}./hello.sh${NC}"
    echo -e "            runs './hello <name>' and returns the output"
    echo -e "        ${YELLOW}example${NC}: ${CYAN}command${NC} ${GREEN}/wordcount${NC} ${GREEN}'wc -w'${NC}"
    echo -e "            will run 'wc -w' on the request body and return the result"
    # echo -e "        ${MAGENTA}note${NC}: something"
    echo -e "    ${CYAN}proxy${NC} ${GREEN}<endpoint>${NC} ${GREEN}<target>${NC}"
    echo -e "        forward all requests from this endpoint to the target server"
    echo -e "        ${YELLOW}example${NC}: ${CYAN}proxy${NC} ${GREEN}/proxy${NC} ${GREEN}localhost:8080/api${NC}"
    echo -e "            will forward a request sent to '/proxy/resource'"
    echo -e "            to 'localhost:8080/api/resource' and attach cors headers on the response"
    echo -e "        ${MAGENTA}note${NC}: adds cors headers to relayed responses"
}
